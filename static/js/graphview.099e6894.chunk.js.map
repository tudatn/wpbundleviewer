{"version":3,"file":"static/js/graphview.099e6894.chunk.js","mappings":"oKAUO,MAAMA,EAAiCC,IAA+B,IAA9B,QAAEC,EAAO,YAAEC,GAAaF,EACrE,OAAQG,EAAOC,GAAQC,IAAWC,EAAAA,EAAAA,WAAqC,IAAML,MAEvEM,GAAWC,EAAAA,EAAAA,QAA8B,OACzC,WAAEC,EAAU,QAAEC,EAAO,YAAEC,EAAW,cAAEC,EAAa,kBAAEC,EAAiB,iBAAEC,IAC1EC,EAAAA,EAAAA,IAAa,CACXC,IAAKT,EACLJ,MAAOA,EACPC,MAAOA,EACPa,cAAe,MACfC,kBAAmB,MACnBC,eAAe,IAGbC,GAAoBC,EAAAA,EAAAA,cACvBC,IAAqB,IAADC,EACnB,MAAOC,EAAUC,GAAsC,QAA7BF,EAAc,OAAXrB,QAAW,IAAXA,OAAW,EAAXA,EAAcoB,EAAMnB,UAAM,IAAAoB,EAAAA,EAAI,CAAC,GAAI,IACxC,IAApBC,EAASE,QACbrB,EAAQ,CAACF,EAAMwB,OAAOH,GAAWpB,EAAMuB,OAAOF,IAAW,GAE3D,CAACvB,EAAaC,EAAOC,IAOvB,OAJAwB,EAAAA,EAAAA,YAAU,KACRvB,EAAQJ,IAAU,GACjB,CAACA,KAGF4B,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CACVd,IAAKT,EACLJ,MAAOA,EACPC,MAAOA,EACPK,WAAYA,EACZC,QAASA,EACTG,kBAAmBA,EACnBC,iBAAkBA,EAClBF,cAAeA,EACfQ,kBAAmBA,EACnBT,YAAaA,EACboB,WAAW,aACXC,WAAW,mBACX,C","sources":["controls/Views/GraphView.tsx"],"sourcesContent":["import React, { FC, useCallback, useEffect, useRef, useState } from \"react\";\nimport { GraphCanvas, GraphCanvasRef, GraphEdge, GraphNode, useSelection } from \"reagraph\";\n\nexport interface IGraphViewProps {\n  /** Callback to get graph data */\n  getData: () => [GraphNode[], GraphEdge[]];\n  /** Callback to get graph data from a node */\n  getNodeData?: (node: GraphNode, currentNodes: GraphNode[]) => [GraphNode[], GraphEdge[]];\n}\n\nexport const GraphView: FC<IGraphViewProps> = ({ getData, getNodeData }) => {\n  const [[nodes, edges], setData] = useState<[GraphNode[], GraphEdge[]]>(() => getData());\n\n  const graphRef = useRef<GraphCanvasRef | null>(null);\n  const { selections, actives, onNodeClick, onCanvasClick, onNodePointerOver, onNodePointerOut } =\n    useSelection({\n      ref: graphRef,\n      nodes: nodes,\n      edges: edges,\n      pathHoverType: \"all\",\n      pathSelectionType: \"all\",\n      focusOnSelect: false,\n    });\n\n  const onNodeDoubleClick = useCallback(\n    (node: GraphNode) => {\n      const [newNodes, newEdges] = getNodeData?.(node, nodes) ?? [[], []];\n      if (newNodes.length === 0) return;\n      setData([nodes.concat(newNodes), edges.concat(newEdges)]);\n    },\n    [getNodeData, nodes, edges]\n  );\n\n  useEffect(() => {\n    setData(getData());\n  }, [getData]);\n\n  return (\n    <GraphCanvas\n      ref={graphRef}\n      nodes={nodes}\n      edges={edges}\n      selections={selections}\n      actives={actives}\n      onNodePointerOver={onNodePointerOver}\n      onNodePointerOut={onNodePointerOut}\n      onCanvasClick={onCanvasClick}\n      onNodeDoubleClick={onNodeDoubleClick}\n      onNodeClick={onNodeClick}\n      sizingType=\"centrality\"\n      layoutType=\"forceDirected2d\"\n    />\n  );\n};\n"],"names":["GraphView","_ref","getData","getNodeData","nodes","edges","setData","useState","graphRef","useRef","selections","actives","onNodeClick","onCanvasClick","onNodePointerOver","onNodePointerOut","useSelection","ref","pathHoverType","pathSelectionType","focusOnSelect","onNodeDoubleClick","useCallback","node","_getNodeData","newNodes","newEdges","length","concat","useEffect","_jsx","GraphCanvas","sizingType","layoutType"],"sourceRoot":""}